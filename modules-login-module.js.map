{"version":3,"sources":["webpack:///./src/app/components/login/login.components.ts","webpack:///./src/app/modules/login.module.ts","webpack:///./src/app/services/login.service.ts","webpack:///./src/app/views/login/login.components.html"],"names":[],"mappings":"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","file":"modules-login-module.js","sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Subscription } from 'rxjs';\r\nimport { AppConstant } from 'src/app/constant/app.constant';\r\nimport { UrlConstant } from 'src/app/constant/url.constant';\r\nimport { LoginI } from 'src/app/model/login.modal';\r\nimport { LogInService } from 'src/app/services/login.service';\r\nimport { ApplicationHelper, User } from 'src/app/constant/application.helper';\r\n\r\n@Component({\r\n    selector: 'admin-login',\r\n    templateUrl: '../../views/login/login.components.html'\r\n})\r\n\r\nexport class LoginComponents {\r\n\r\n    public userInfo:User = new User();\r\n\r\n    loginForm: FormGroup;\r\n    submitClick: boolean;\r\n    subscribe: Subscription;\r\n    loader: boolean;\r\n    forgotPassword: boolean=false;\r\n    isEmailValid: boolean=false;\r\n    isEmailEntered: boolean=false;\r\n    emailAddress:string=\"\";\r\n    constructor(\r\n        private _route: Router,\r\n        private _formBuilder: FormBuilder,\r\n        private loginService: LogInService,\r\n        private _tosterServices: ToastrService,\r\n        public _appHelper: ApplicationHelper,\r\n\r\n    ) {\r\n        this.loginForm = this._formBuilder.group({\r\n            'password': ['', [Validators.required]],\r\n            \"email\": ['', [Validators.required]]\r\n        })\r\n    }\r\n\r\n    /* .................adminLogin................ */\r\n\r\n    /* this will take the Data From the user email and password take you to the DashBoard */\r\n\r\n    adminLogin() {\r\n        this.loader = true;\r\n        this.submitClick = true;\r\n        if (this.loginForm.valid) {\r\n            this.subscribe = this.loginService.adminLogin(this.loginParams()).subscribe((data: any) => {\r\n\r\n                if (data.status == true) {\r\n                \r\n                    this.loader = false;\r\n                    localStorage.setItem(AppConstant.LOGIN_DATA_KEY, JSON.stringify(data.result.userId)); /*  saving the Data Into local storage  */\r\n                    localStorage.setItem(AppConstant.USER_TOKEN_KEY, JSON.stringify(data.result.authToken));\r\n                    localStorage.setItem(AppConstant.USER_NAME, JSON.stringify(data.result.username));\r\n                    localStorage.setItem(AppConstant.USER_TYPE, JSON.stringify(data.result.roleType));\r\n                    if(data.result.transferToken){\r\n                        localStorage.setItem(AppConstant.USER_TRANSFER_TOKEN, JSON.stringify(data.result.transferToken));\r\n                    }\r\n                    this.userInfo = {\r\n                        userId:data.result.userId,\r\n                        username: data.result.username,\r\n                        name: data.result.name,\r\n                        userAccessLevel: data.result.roleType\r\n                    };\r\n                    this._appHelper.setloggedInUserInfo(this.userInfo);\r\n                    this._tosterServices.success(data.message, \"You have successfully Logged In\")\r\n                    this._route.navigate([UrlConstant.DASH_BORAD_PATH])  /*navigate  to the Dashborad Page  */\r\n                }\r\n                else {\r\n                    this.loader = false;\r\n                    this._tosterServices.error(data.message, \"Please enter valid credentials\")\r\n                }\r\n            }, (error) => {\r\n                this.loader = false;\r\n                console.log(error);\r\n            })\r\n        }\r\n    }\r\n\r\n    resetPassword() {\r\n        this.loader = true;\r\n        if (this.loginForm.valid) {\r\n            this.subscribe = this.loginService.forgotPassword({email:this.emailAddress}).subscribe((data: any) => {\r\n\r\n                if (data.status == true) {\r\n                \r\n                    this.loader = false;\r\n                    this._tosterServices.success(data.message, \"password sent successfully\")\r\n                    this.forgotPassword=false;\r\n                }\r\n                else {\r\n                    this.loader = false;\r\n                    this._tosterServices.error(data.message, \"Please enter valid credentials\")\r\n                }\r\n            }, (error) => {\r\n                this.loader = false;\r\n                console.log(error);\r\n            })\r\n        }\r\n    }\r\n    /* .........completed .................... */\r\n\r\n    toggleLogin(){\r\n        this.forgotPassword=this.forgotPassword==false ? true :false;\r\n    }\r\n    /* .......................login object ................................ */\r\n    private loginParams(): LoginI {\r\n\r\n        var loginElement = {\r\n            loginObj: <LoginI>{\r\n                username: this.loginForm.value.email,\r\n                password: this.loginForm.value.password,\r\n              \r\n            }\r\n        }\r\n        return loginElement.loginObj;\r\n    }\r\n    /* ............................completed ............................ */\r\n\r\n\r\n    // / ....................... Error form control ................................ /\r\n\r\n    get formError() {\r\n        return this.loginForm.controls;\r\n    }\r\n    // / .......................completed ................................ /\r\n\r\n    ngOnDestroy() {\r\n        this.subscribe = undefined;\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponents } from '../components/login/login.components';\r\nimport { ControlMassageModule } from '../shared/modules/control-massage.module';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: LoginComponents,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponents,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    ControlMassageModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  providers: [],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginModule { }\r\n","import { Injectable } from \"@angular/core\";\r\nimport { BaseServices } from './bases.service';\r\nimport { ApiConstants } from '../constant/api';\r\nimport { Observable } from 'rxjs';\r\nimport { LoginI } from '../model/login.modal';\r\nimport { ApiBaseUrl } from '../constant/constants';\r\n\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class LogInService {\r\n\r\n    constructor(private _basesServices: BaseServices) {\r\n    }\r\n    /* ..........................calling the adminlogin Api ...................*/\r\n    adminLogin(loginObj): Observable<LoginI> {\r\n        return this._basesServices.postRequest(`${ApiBaseUrl}/login`, loginObj)\r\n    }\r\n    forgotPassword(loginObj): Observable<LoginI> {\r\n        return this._basesServices.postRequest(`${ApiBaseUrl}/forgotPassword`, loginObj)\r\n    }\r\n\r\n    /*  .............completed ................................*/\r\n\r\n}","module.exports = \"<div style=\\\"background-image: url('assets/images/arback.jpg');\\\">\\r\\n  <div class=\\\"splash-container login-wrap d-flex align-items-center\\\">\\r\\n    <div class=\\\"card w-100 pt-4 pb-4\\\">\\r\\n      <div class=\\\"card-header text-center\\\"><a href=\\\"javascript:void(0)\\\"><img src=\\\"assets/images/logo.png\\\"\\r\\n            alt=\\\"logo\\\"></a>\\r\\n        <br>\\r\\n      </div>\\r\\n      <div *ngIf=\\\"!forgotPassword\\\" class=\\\"card-body\\\">\\r\\n        <form [formGroup]=\\\"loginForm\\\" #myform=\\\"ngForm\\\" (ngSubmit)=\\\"adminLogin()\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <input type=\\\"email\\\" class=\\\"form-control form-control-lg\\\" id=\\\"exampleInputEmail\\\"\\r\\n              placeholder=\\\"Enter Email Address...\\\" formControlName=\\\"email\\\" autocomplete=\\\"off\\\">\\r\\n            <p class=\\\"error-msg text-danger\\\"\\r\\n              *ngIf=\\\"formError.email.touched && formError.email.invalid ||(loginForm.get('email').hasError('required') && myform.submitted)\\\">\\r\\n              <span *ngIf=\\\"formError.email.errors?.required\\\">Email Address is required.</span>\\r\\n              <span *ngIf=\\\"formError.email.errors?.email\\\">Email Address is not valid.</span>\\r\\n            </p>\\r\\n          </div>\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <input type=\\\"password\\\" class=\\\"form-control form-control-lg\\\" id=\\\"exampleInputPassword\\\" placeholder=\\\"Password\\\"\\r\\n              formControlName=\\\"password\\\" autocomplete=\\\"off\\\">\\r\\n            <p class=\\\"error-msg text-danger\\\"\\r\\n              *ngIf=\\\"formError.password.touched && formError.password.invalid ||(loginForm.get('password').hasError('required') && myform.submitted)\\\">\\r\\n              <span *ngIf=\\\"formError.password.errors?.required\\\">Password is required.</span>\\r\\n            </p>\\r\\n          </div>\\r\\n          <button class=\\\"btn btn-primary btn-lg btn-block\\\" type=\\\"submit\\\">\\r\\n            Login\\r\\n          </button>\\r\\n          <!-- <button class=\\\"btn btn-primary btn-lg btn-block\\\" (click)=\\\"toggleLogin()\\\">\\r\\n            Forgot Password\\r\\n          </button> -->\\r\\n        </form>\\r\\n      </div>\\r\\n      <div *ngIf=\\\"forgotPassword\\\" class=\\\"card-body\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <input class=\\\"form-control form-control-lg\\\" id=\\\"exampleInputEmail11\\\" placeholder=\\\"Enter Email Address...\\\"\\r\\n            [(ngModel)]=\\\"emailAddress\\\">\\r\\n          <p class=\\\"error-msg text-danger\\\">\\r\\n            <span *ngIf=\\\"isEmailEntered\\\">Email Address is required.</span>\\r\\n            <span *ngIf=\\\"isEmailValid\\\">Email Address is not valid.</span>\\r\\n          </p>\\r\\n        </div>\\r\\n        <button class=\\\"btn btn-primary btn-lg btn-block\\\" (click)=\\\"resetPassword()\\\">\\r\\n          Send Password\\r\\n        </button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"lds-roller\\\" *ngIf=\\\"loader\\\">\\r\\n  <div></div>\\r\\n  <div></div>\\r\\n  <div></div>\\r\\n  <div></div>\\r\\n  <div></div>\\r\\n  <div></div>\\r\\n  <div></div>\\r\\n  <div></div>\\r\\n</div>\""],"sourceRoot":""}